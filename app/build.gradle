apply plugin: 'com.android.application'
apply plugin: com.fxq.gradle.plugin.SecondPlugin  //方式二 结合module（buildsrc）使用gradle插件
apply plugin: 'com.fxq.plugin'  //和plugin的properties文件名称一致
apply plugin: 'walle'


android {
    compileSdkVersion 27
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "com.example.fangxq.myapplication"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            //这样写就得把release.keystore文件放在项目目录
            storeFile file("fxq.keystore")
            storePassword "891019"
            keyAlias "Fxq"
            keyPassword "fxq891019"
        }
        release {
            //这样写就得把release.keystore文件放在项目目录
            storeFile file("fxq.keystore")
            storePassword "891019"
            keyAlias "Fxq"
            keyPassword "fxq891019"
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
        maven {
            url "http://maven.aliyun.com/nexus/content/repositories/releases"
        }

    }

//    lintOptions {
//        checkReleaseBuilds false
//        abortOnError false
//    }


}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile project(':fxqCommonBusiness')
    compile project(':fxqDesignMethod')
    implementation project(':flutter')
    //compile 'com.aliyun.ams:alicloud-android-hotfix:3.2.3'
    compile 'com.github.anrwatchdog:anrwatchdog:1.3.0'
    compile 'com.android.support:multidex:1.0.2'
    compile 'com.meituan.android.walle:library:1.1.6'
//    implementation group: "com.tencent.matrix", name: "matrix-android-lib", version: MATRIX_VERSION, changing: true
//    implementation group: "com.tencent.matrix", name: "matrix-android-commons", version: MATRIX_VERSION, changing: true
//    implementation group: "com.tencent.matrix", name: "matrix-trace-canary", version: MATRIX_VERSION, changing: true
//    implementation group: "com.tencent.matrix", name: "matrix-resource-canary-android", version: MATRIX_VERSION, changing: true
//    implementation group: "com.tencent.matrix", name: "matrix-resource-canary-common", version: MATRIX_VERSION, changing: true
//    implementation group: "com.tencent.matrix", name: "matrix-io-canary", version: MATRIX_VERSION, changing: true
//    implementation group: "com.tencent.matrix", name: "matrix-sqlite-lint-android-sdk", version: MATRIX_VERSION, changing: true



}


//gradlew clean assembleReleaseChannels 即可生成所有的渠道包
//gradlew clean assembleReleaseChannels -PchannelList=渠道名
walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

//apply plugin: 'com.tencent.matrix-plugin'
//matrix {
//    trace {
//        enable = true	//if you don't want to use trace canary, set false
//        baseMethodMapFile = "${project.buildDir}/matrix_output/Debug.methodmap"
//        blackListFile = "${project.projectDir}/matrixTrace/blackMethodList.txt"
//    }
//}

